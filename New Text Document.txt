package org.firstinspires.ftc.teamcode;

import android.graphics.Color;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import org.firstinspires.ftc.robotcore.external.JavaUtil;



@Autonomous(name = "AZAuto1 (Blocks to Java)")
public class AZAuto extends LinearOpMode {

  private DcMotor backright;
  private DcMotor frontright;
  private DcMotor frontleft;
  private DcMotor backleft;
  private ColorSensor color;
  private DcMotor yoAsDcMotor;
  private DcMotor deriniseeu;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    int current_color=0;

    backright = hardwareMap.get(DcMotor.class, "backright");
    frontright = hardwareMap.get(DcMotor.class, "frontright");
    frontleft = hardwareMap.get(DcMotor.class, "frontleft");
    backleft = hardwareMap.get(DcMotor.class, "backleft");
    color = hardwareMap.get(ColorSensor.class, "color");
    yoAsDcMotor = hardwareMap.get(DcMotor.class, "yoAsDcMotor");
    deriniseeu = hardwareMap.get(DcMotor.class, "derin i see u");
    
    // Put initialization blocks here.
    backright.setDirection(DcMotorSimple.Direction.FORWARD);
    frontright.setDirection(DcMotorSimple.Direction.FORWARD);
    frontleft.setDirection(DcMotorSimple.Direction.REVERSE);
    backleft.setDirection(DcMotorSimple.Direction.REVERSE);
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      lift();
      sleep(1000);
      Stop();
      sleep(400);
      drive_fwd_cone();
      sleep(2100);
      Stop();
      sleep(400);
      while (opModeIsActive()) {
        // Put loop blocks here.
        if (JavaUtil.colorToSaturation(current_color) > 0.1 && JavaUtil.colorToHue(current_color) > 0 && JavaUtil.colorToHue(current_color) < 500) {
          red();
        }
        if (JavaUtil.colorToSaturation(current_color) > 0.1 && JavaUtil.colorToHue(current_color) > 1 && JavaUtil.colorToHue(current_color) < 2) {
          blue();
        }
        if (JavaUtil.colorToSaturation(current_color) > 0.1 && JavaUtil.colorToHue(current_color) > 1 && JavaUtil.colorToHue(current_color) < 1) {
          green();
        }
        current_color = Color.argb(color.alpha(), color.red(), color.green(), color.blue());
        telemetry.update();
      }
    }
  }

  /**
   * Describe this function...
   */
  private void red() {
    Drive_bckwd();
    sleep(1800);
    Stop();
    sleep(800);
    turn_left();
    sleep(700);
    Stop();
    sleep(400);
    Drive_fwd();
    sleep(950);
    Stop();
    sleep(500);
    turn_right();
    sleep(705);
    Drive_fwd();
    Stop();
    sleep(400);
    Drive_fwd();
    sleep(1500);
    Stop();
    sleep(400);
    turn_right();
    sleep(680);
    Stop();
    sleep(400);
    lift();
    sleep(2500);
    Drive_fwd();
    sleep(350);
    Stop();
    sleep(700);
    End_activate();
    sleep(500);
    Stop();
    sleep(500);
    lift();
    sleep(400);
    Stop();
    sleep(800);
    Drive_bckwd();
    sleep(300);
    Stop();
    sleep(100400);
  }

  /**
   * Describe this function...
   */
  private void green() {
    Drive_bckwd();
    sleep(1800);
    Stop();
    sleep(800);
    turn_right();
    sleep(800);
    Stop();
    sleep(400);
    Drive_fwd();
    sleep(1050);
    Stop();
    sleep(500);
    turn_left();
    sleep(810);
    Stop();
    sleep(400);
    Drive_fwd();
    sleep(1050);
    Stop();
    sleep(140000);
  }

  /**
   * Describe this function...
   */
  private void blue() {
    Drive_bckwd();
    sleep(2000);
    Stop();
    sleep(1800);
    Drive_fwd();
    sleep(1450);
    Stop();
    sleep(140000);
  }

  /**
   * Describe this function...
   */
  private void Drive_bckwd() {
    backleft.setPower(-0.35);
    frontleft.setPower(-0.35);
    backright.setPower(-0.37);
    frontright.setPower(-0.37);
  }
  
  /**
   * Describe this function...
   */
  private void Drive_fwd() {
    backleft.setPower(0.35);
    frontleft.setPower(0.35);
    backright.setPower(0.35);
    frontright.setPower(0.35);
  }

  /**
   * Describe this function...
   */
  private void Stop() {
    backleft.setPower(0);
    frontleft.setPower(0);
    backright.setPower(0);
    frontright.setPower(0);
    deriniseeu.setPower(0);
    yoAsDcMotor.setPower(0);
  }
  
  private void Stop2() {
    backleft.setPower(0);
    frontleft.setPower(0);
    backright.setPower(0);
    frontright.setPower(0);
    deriniseeu.setPower(0);
    yoAsDcMotor.setPower(0.5);
  }

  /**
   * Describe this function...
   */
  private void Strafe_right() {
    backleft.setPower(-0.4);
    frontleft.setPower(0.4);
    backright.setPower(0.4);
    frontright.setPower(-0.4);
  }

  /**
   * Describe this function...
   */
  private void Strafe_Left() {
    backleft.setPower(0.4);
    frontleft.setPower(-0.4);
    backright.setPower(-0.4);
    frontright.setPower(0.4);
  }

  /**
   * Describe this function...
   */
  private void drive_fwd_cone() {
    yoAsDcMotor.setPower(-0.05);
    backleft.setPower(0.355);
    frontleft.setPower(0.355);
    backright.setPower(0.365);
    frontright.setPower(0.365);
  }
  /**
   * Describe this function...
   */
  private void lift() {
    yoAsDcMotor.setPower(0.5);
  }
  
  private void downlift() {
    yoAsDcMotor.setPower(-0.5);
  }
  /**
   * Describe this function...
   */
  private void End_activate() {
    deriniseeu.setPower(1);
    yoAsDcMotor.setPower(0.5);
  }
  /**
   * Describe this function...
   */
  private void turn_left() {
    backleft.setPower(-0.35);
    frontleft.setPower(-0.35);
    backright.setPower(0.35);
    frontright.setPower(0.35);
  }
  /**
   * Describe this function...
   */
  private void turn_right() {
    backleft.setPower(0.35);
    frontleft.setPower(0.35);
    backright.setPower(-0.35);
    frontright.setPower(-0.35);
  }
}